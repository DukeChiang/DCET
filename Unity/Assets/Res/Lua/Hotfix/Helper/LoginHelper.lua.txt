-- Generated by CSharp.lua Compiler
local System = System
local DCET = DCET
local DCETRuntime = DCETRuntime
local DCET
System.import(function (out)
  DCET = out.DCET
end)
System.namespace("DCET", function (namespace)
  namespace.class("LoginHelper", function (namespace)
    local OnLoginAsync
    OnLoginAsync = function (account)
      System.async(function (async, account)
        System.try(function ()
          DCET.Log.Debug("服务器地址:" .. DCETRuntime.GlobalConfigComponent.getInstance().GlobalProto.Address)
          local session = DCET.Game.Scene:GetComponent(DCET.NetOuterComponent):Create1(DCETRuntime.GlobalConfigComponent.getInstance().GlobalProto.Address)

          local default = DCET.C2R_Login()
          default.Account = account
          default.Password = "111111"
          local r2CLogin = System.cast(DCET.R2C_Login, async:await(session:Call(default)))

          session:Dispose()

          DCET.SessionComponent.Instance:setSession(DCET.Game.Scene:GetComponent(DCET.NetOuterComponent):Create1(r2CLogin.Address))

          local extern = DCET.C2G_LoginGate()
          extern.Key = r2CLogin.Key
          extern.GateId = r2CLogin.GateId
          local g2CLoginGate = System.cast(DCET.G2C_LoginGate, async:await(DCET.SessionComponent.Instance:getSession():Call(extern)))
          DCET.Log.Info("登陆gate成功!")

          -- 创建Player
          local player = DCET.EntityFactory.CreateWithId(DCET.Game.Scene, g2CLoginGate.PlayerId, DCET.Player)
          local playerComponent = DCET.Game.Scene:GetComponent(DCET.PlayerComponent)
          playerComponent:setMyPlayer(player)

          DCET.Game.getEventSystem():Run("LoginFinish" --[[EventIdType.LoginFinish]])

          -- 测试消息有成员是class类型
          local g2CPlayerInfo = System.cast(DCET.G2C_PlayerInfo, async:await(DCET.SessionComponent.Instance:getSession():Call(DCET.C2G_PlayerInfo())))
        end, function (default)
          local e = default
          DCET.Log.Exception(e)
        end)
      end, true, account)
    end
    return {
      OnLoginAsync = OnLoginAsync
    }
  end)
end)
